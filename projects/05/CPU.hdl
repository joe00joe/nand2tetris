// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    And(a=instruction[15], b=true, out=flag);
	And(a=instruction[12], b=flag, out=a);
	And(a=instruction[11], b=flag, out=c1);
	And(a=instruction[10], b=flag, out=c2);
	And(a=instruction[9], b=flag, out=c3);
	And(a=instruction[8], b=flag, out=c4);
	And(a=instruction[7], b=flag, out=c5);
	And(a=instruction[6], b=flag, out=c6);
	And(a=instruction[5], b=flag, out=d1);
	And(a=instruction[4], b=flag, out=d2);
	And(a=instruction[3], b=flag, out=d3, out=writeM);  //writeM?
	And(a=instruction[2], b=flag, out=j1);
	And(a=instruction[1], b=flag, out=j2);
	And(a=instruction[0], b=flag, out=j3);
	Not(in=flag, out=notf);
	
	
	Mux16(a=outALU, b=instruction, sel=notf, out=oALUorA);
	Or(a=d1, b=notf, out=loadA);
    Register(in=oALUorA, load=loadA, out=RA, out[0..14]=addressM);    //ARegister  or addressM?
	Mux16(a=RA, b=inM, sel=a, out=AorM);
    
	Register(in=outALU, load=d2, out=RB);        //BRegister
	
	
	ALU(x=RB, y=AorM, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=outM, out=outALU, zr=EQ, ng=LT );  //ALU  EQ? LT?
	
	
	//ALU flag 
    Not(in=EQ, out=noEQ);
	Not(in=LT, out=noLT);
	And(a=noEQ, b=noLT, out=GT);  //GT
	Not(in=LT, out=GE);    //GE
	Not(in=EQ, out=NE);    //NE
	Not(in=GT, out=LE);    //LE
	
  
    //isJump
	And(a=j3, b=GT, out=JGT);
	And(a=j2, b=EQ, out=JEQ);
	And(a=j2, b=j3, out=j23);
	And(a=j23, b=GE, out=JGE);
	And(a=j1, b=LT, out=JLT);
	And(a=j1, b=j3, out=j13);
	And(a=j13, b=NE, out=JNE);
    And(a=j1, b=j2, out=j12);
	And(a=j12, b=LE, out=JLE);
	And(a=j12, b=j3, out=JUMP);
	
	Or8Way(in[0]=false, in[1]=JGT, in[2]=JEQ, in[3]=JGE, in[4]=JLT, in[5]=JNE, in[6]=JLE, in[7]=JUMP, out=loadPC);
	
   
	PC(in=RA, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
	
    
}